---
- hosts: master
  become: true
  roles:
    - cloudalchemy.grafana
  tasks:
      - name: Install additional soft
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
          cache_valid_time: 3600
        vars:
          packages:
          - unzip
          - zip

      - name: Touch loki-local-config.yaml in /etc/
        ansible.builtin.file:
          path: /etc/loki-local-config.yaml
          state: touch
          owner: root
          group: root
          mode: '0640'

      - name: Add config in /etc/loki-local-config.yaml
        blockinfile:
          path: /etc/loki-local-config.yaml
          block: |2
              auth_enabled: false
    
              server:
                http_listen_port: 3100
    
              ingester:
                lifecycler:
                  address: 127.0.0.1
                  ring:
                    kvstore:
                      store: inmemory
                    replication_factor: 1
                  final_sleep: 0s
                chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed
                max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h
                chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first
                chunk_retain_period: 30s    # Must be greater than index read cache TTL if using an index cache (Default index read cache TTL is 5m)
                max_transfer_retries: 0     # Chunk transfers disabled
    
              schema_config:
                configs:
                  - from: 2020-10-24
                    store: boltdb-shipper
                    object_store: filesystem
                    schema: v11
                    index:
                      prefix: index_
                      period: 24h
    
              storage_config:
                boltdb_shipper:
                  active_index_directory: /tmp/loki/boltdb-shipper-active
                  cache_location: /tmp/loki/boltdb-shipper-cache
                  cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space
                  shared_store: filesystem
                filesystem:
                  directory: /tmp/loki/chunks
    
              compactor:
                working_directory: /tmp/loki/boltdb-shipper-compactor
                shared_store: filesystem
    
              limits_config:
                reject_old_samples: true
                reject_old_samples_max_age: 168h
    
              chunk_store_config:
                max_look_back_period: 0s
    
              table_manager:
                retention_deletes_enabled: false
                retention_period: 0s
    
              ruler:
                storage:
                  type: local
                  local:
                    directory: /tmp/loki/rules
                rule_path: /tmp/loki/rules-temp
                alertmanager_url: http://localhost:9093
                ring:
                  kvstore:
                    store: inmemory
                enable_api: true

      - name: Download Loki and put in /usr/local/bin
        ansible.builtin.unarchive:
          src: https://github.com/grafana/loki/releases/download/v2.1.0/loki-linux-amd64.zip
          dest: /usr/local/bin/
          remote_src: yes

      - name: Touch /etc/systemd/system/loki.service
        ansible.builtin.file:
          path: /etc/systemd/system/loki.service
          state: touch
          owner: root
          group: root
          mode: '0644'

      - name: Add  content to Loki systemd unit
        blockinfile:
          path: /etc/systemd/system/loki.service
          block: |2
              [Unit]
              Description=Loki service
              After=network.target
    
              [Service]
              Type=simple
              User=root
              ExecStart=/usr/local/bin/loki-linux-amd64 -config.file /etc/loki-local-config.yaml
    
              [Install]
              WantedBy=multi-user.target

      - name: Restart Loki service
        systemd:
          name: loki.service
          state: restarted
          daemon_reload: yes
          enabled: yes
          masked: no

      - name: Restart rsyslog service
        systemd:
          name: rsyslog.service
          state: restarted
          daemon_reload: yes
          enabled: yes
          masked: no

      - name: Download Promtail and put in /usr/local/bin
        ansible.builtin.unarchive:
          src: https://github.com/grafana/loki/releases/download/v2.1.0/promtail-linux-amd64.zip
          dest: /usr/local/bin/
          remote_src: yes

      - name: Touch promtail-local-config.yaml in /etc/
        ansible.builtin.file:
          path: /etc/promtail-local-config.yaml
          state: touch
          owner: root
          group: root
          mode: '0640'

      - name: Add config in /etc/promtail-local-config.yaml
        blockinfile:
          path: /etc/promtail-local-config.yaml
          block: |2
              server:
                http_listen_port: 9080
                grpc_listen_port: 0
    
              positions:
                filename: /tmp/positions.yaml
    
              clients:
                - url: http://localhost:3100/loki/api/v1/push
    
              scrape_configs:
              - job_name: system
                static_configs:
                - targets:
                    - localhost
                  labels:
                    job: varlogs
                    __path__: /var/log/*log

      - name: Touch /etc/systemd/system/promtail.service
        ansible.builtin.file:
          path: /etc/systemd/system/promtail.service
          state: touch
          owner: root
          group: root
          mode: '0644'

      - name: Add content to Promtail systemd unit
        blockinfile:
          path: /etc/systemd/system/promtail.service
          block: |2
              [Unit]
              Description=Promtail service
              After=network.target
    
              [Service]
              Type=simple
              User=root
              ExecStart=/usr/local/bin/promtail-linux-amd64 -config.file /etc/promtail-local-config.yaml
    
              [Install]
              WantedBy=multi-user.target

      - name: Restart Loki service
        systemd:
          name: promtail.service
          state: restarted
          daemon_reload: yes
          enabled: yes
          masked: no

      - name: Install/update Grafana grafana-image-renderer plugin
        community.grafana.grafana_plugin:
          name: grafana-image-renderer
          version: latest
          state: present

      - name: Restart grafana-server service
        systemd:
          name: grafana-server.service
          state: restarted
          daemon_reload: yes
          enabled: yes
          masked: no

      - name: Install grafana-image-renderer dependencies
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
          cache_valid_time: 3600
        vars:
          packages:
          - libx11-xcb1
          - libxcb-dri3-0
          - libxcomposite1
          - libxcb-cursor0
          - libxcursor1
          - libxdamage1
          - libxi6
          - libxtst6
          - libnss3
          - libatk1.0-0
          - libatk-bridge2.0-0
          - libcups2
          - libxss1
          - libxrandr2
          - libgbm1
          - libasound2
          - libgtk-3-0
          - libpangocairo-1.0-0
          - libx11-6
          - libxext6
          - libxfixes3
          - libxrender1
          - libglib2.0-0
          - libdbus-1-3
          - libxshmfence1

      - name: Extract dashboards.tgz into /tmp
        ansible.builtin.unarchive:
          src: dashboards.tgz
          dest: /tmp

      - name: Import Grafana dashboard node-exporter-full
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/node-exporter-full.json

      - name: Import Grafana dashboard Kubernetes_API_server
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_API_server.json

      - name: Import Grafana dashboard Kubernetes_Compute_Resources_Cluster
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Compute_Resources_Cluster.json

      - name: Import Grafana dashboard Kubernetes_ComputeResources_Namespace(Pods)
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_ComputeResources_Namespace(Pods).json

      - name: Import Grafana dashboard Kubernetes_ComputeResources_Namespace(Workloads)
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_ComputeResources_Namespace(Workloads).json

      - name: Import Grafana dashboard Kubernetes_ComputeResources_Node(Pods)
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_ComputeResources_Node(Pods).json

      - name: Import Grafana dashboard Kubernetes_ComputeResources_Workload
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_ComputeResources_Workload.json

      - name: Import Grafana dashboard Kubernetes_Kubelet
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Kubelet.json

      - name: Import Grafana dashboard Kubernetes_Networking_Cluster
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Networking_Cluster.json

      - name: Import Grafana dashboard Kubernetes_Networking_Namespace(Pods)
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Networking_Namespace(Pods).json

      - name: Import Grafana dashboard Kubernetes_Networking_Namespace(Workload)
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Networking_Namespace(Workload).json

      - name: Import Grafana dashboard Kubernetes_Networking_Pod
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Networking_Pod.json

      - name: Import Grafana dashboard Kubernetes_Networking_Workload
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Networking_Workload.json

      - name: Import Grafana dashboard Kubernetes_PersistentVolumes
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_PersistentVolumes.json

      - name: Import Grafana dashboard Kubernetes_Scheduler
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_Scheduler.json

      - name: Import Grafana dashboard Kubernetes_StatefulSets
        community.grafana.grafana_dashboard:
          grafana_url: "http://{{ grafana_address }}:{{ grafana_port }}"
          url_password: "admin"
          url_username: "admin"
          state: present
          commit_message: Updated by ansible
          overwrite: yes
          path: /tmp/Kubernetes_StatefulSets.json
